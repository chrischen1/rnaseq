?writeChar
?writeChar
# enrichment analysis
library(org.Mm.eg.db)
BiocManager::install('org.Mm.eg.db')
cnt <- read.csv('~/Dropbox/MU/workspace/will_rnaseq/final/counts.csv',row.names = 1,check.names = F)
grp <- read.csv('~/Dropbox/MU/workspace/will_rnaseq/group.csv',row.names = 1,check.names = F)
rpkm_data <- read.csv('~/Dropbox/MU/workspace/will_rnaseq/final/rpkm.csv',row.names = 1,check.names = F)
source('https://raw.githubusercontent.com/chrischen1/rnaseq/master/de_rnaseq.R')
rownames(grp) <- paste0('S',rownames(grp))
colnames(rpkm_data) <- colnames(cnt) <- gsub('.+_','',colnames(cnt))
cnt <- cnt[,rownames(grp)]
rpkm_data <- rpkm_data[,rownames(grp)]
# heatmap
rpkm_data1 <- rpkm_data[apply(rpkm_data, 1, function(x)(sum(x>0.1)))>22,]
my_sample_col <- data.frame(group = grp$group,condition = grp$condition)
row.names(my_sample_col) <- rownames(grp)
pheatmap(log2(rpkm_data1+0.01),show_rownames = F,scale = 'column', annotation_col = my_sample_col)
library(pheatmap)
install.packages('pheatmap')
library(pheatmap)
pheatmap(log2(rpkm_data1+0.01),show_rownames = F,scale = 'column', annotation_col = my_sample_col)
# differential expression analysis
de_result <- edgeR_wrapper(cnt,grp)
install.packages('edgeR')
BiocManager::install('edgeR')
source('https://raw.githubusercontent.com/chrischen1/rnaseq/master/de_rnaseq.R')
# differential expression analysis
de_result <- edgeR_wrapper(cnt,grp)
View(grp)
aaa=de_result$normal.BME_50
View(aaa)
grp
grp1 <- cbind.data.frame(grp[grp$condition=='condition'| grp$condition=='control_TMT',])
grp1
grp1 <- grp[grp$condition=='condition'| grp$condition=='control_TMT',]
grp1
grp1 <- grp[(grp$condition=='condition'(| (grp$condition=='control_TMT'),]
grp1 <- grp[(grp$condition=='condition')| (grp$condition=='control_TMT'),]
grp1
grp1 <- grp[(grp$condition=='condition')|| (grp$condition=='control_TMT'),]
grp1
grp$condition=='condition'
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1
grp1$control[grp1$condition=='control_TMT',] <- FALSE
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
grp1
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control'] <- 'TMT'
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
grp1$group[grp1$condition=='control'] <- 'control'
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control'] <- 'control'
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control'] <- 'control'
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control'] <- 'control'
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control_TMT'] <- 'control'
grp1
grp1 <- grp[(grp$condition=='control') | (grp$condition=='control_TMT'),]
grp1$control[grp1$condition=='control_TMT'] <- FALSE
grp1$group[grp1$condition=='control_TMT'] <- 'normal'
grp1
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
de_result1 <- edgeR_wrapper(cnt[,rownames(grp1)],grp1)
for(i in names(de_result1)){
write.csv(de_result1[[i]],paste0(de_results_path,i,'.csv'))
}
de_results_path <- '~/Dropbox/MU/workspace/will_rnaseq/final/DE/'
for(i in names(de_result1)){
write.csv(de_result1[[i]],paste0(de_results_path,i,'.csv'))
}
install.packages('pca3d')
# PCA
library(pca3d)
head(rpkm_data1)
?prcomp
pca <- prcomp(rpkm_data1, scale.=TRUE)
pca
pca$x
pca <- prcomp(t(rpkm_data1), scale.=TRUE)
pca$x
pca <- prcomp(t(rpkm_data), scale.=TRUE)
rpkm_data1 <- rpkm_data[apply(rpkm_data, 1, function(x)(sum(x>0)))>22,]
pca <- prcomp(t(rpkm_data), scale.=TRUE)
rpkm_data1 <- rpkm_data[apply(rpkm_data, 1, function(x)(sum(x>0.1)))>22,]
pca <- prcomp(t(rpkm_data), scale.=TRUE)
rpkm_data1 <- rpkm_data[apply(rpkm_data, 1, function(x)(sum(x>0)))>22,]
pca <- prcomp(t(rpkm_data1), scale.=TRUE)
pca
pca$x
colnames(rpkm_data1)==rownames(grp)
gr <- factor(grp$condition)
gr
pca3d(pca, group=gr)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75)
?pca3d
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,fancy = T)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,fancy = T)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca2d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca <- prcomp(t(rpkm_data1), scale.=F)
gr <- factor(grp$condition)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
pca2d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T,cex=0.5)
pca2d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T,cex.text=0.5)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T,cex.text=0.5)
# PCA
library(pca3d)
pca <- prcomp(t(rpkm_data1), scale.=TRUE)
gr <- factor(grp$condition)
pca3d(pca, group=gr, show.ellipses=TRUE,ellipse.ci=0.75, show.plane=FALSE,show.group.labels = T)
install.packages('ggfortify')
# PCA
library(ggfortify)
autoplot(prcomp(df), data = grp, colour = 'condition')
autoplot(prcomp(df), data = data.frame(grp), colour = 'condition')
data.frame(grp)
df
autoplot(prcomp(pca), data = data.frame(grp), colour = 'condition')
autoplot(pca, data = data.frame(grp), colour = 'condition')
autoplot(pca, data = data.frame(grp), colour = 'condition', frame = TRUE, frame.type = 'norm')
