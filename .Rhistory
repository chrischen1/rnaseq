cnt=cnt_24
grp_table=grp_table_24
combine_fdr = F
design <- model.matrix(~condition,data = grp_table)
y <- DGEList(counts=cnt, group=grp_table$condition)
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
p_mat <- fdr_mat <- logFC <- NULL
col_names <- c()
cnt=cnt_24[1:1000,]
design <- model.matrix(~condition,data = grp_table)
y <- DGEList(counts=cnt, group=grp_table$condition)
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
p_mat <- fdr_mat <- logFC <- NULL
col_names <- c()
unique(grp_table$group)
i="BT20_24"
grp_table_i <- grp_table[grp_table$group==i,]
ctr_row <- rownames(grp_table_i)[grp_table_i$control==T]
unique(grp_table_i$condition[grp_table_i$control!=T])
grp_table_i
grp_table
grp_table_24
samples_24 <- sample_annotations[sample_annotations$Time==24 | sample_annotations$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$ctrl),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
grp_table_24
View(sample_annotations)
View(samples_24)
samples_24
samples_24 <- sample_annotations[sample_annotations$Time==24 | sample_annotations$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$DrugName=='-'),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
View(grp_table_24)
dim(cnt_24)
cnt_24=cnt_24[1:1000,]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/combined.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/annotation/20161220RNAseqCDKiPR.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
colnames(counts) <- gsub('.+_S(\\d+)_R.+','\\1',colnames(counts))
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
sample_annotations <- sample_annotations[sample_annotations$Treatment != 'N/A',]
counts <- counts[,colnames(counts)%in%sample_annotations$Sample]
counts <- counts[apply(counts,1,min)>4,]
trt <- strsplit(sample_annotations$Treatment,split = ' ')
samples <- data.frame(cbind('well'=sample_annotations$Sample,'CellLine'=sample_annotations$Cell.line,'DrugName'=unlist(lapply(trt,function(x)x[2])),
'Conc'=unlist(lapply(trt,function(x)x[1])),'Time'=gsub(' hours','',sample_annotations$Time.point)),stringsAsFactors = F)
samples$DrugName[is.na(samples$DrugName)] <- '-'
samples$Conc[samples$Conc=='ctrl'] <- '0.0'
samples$Conc <- as.numeric(samples$Conc)
samples$ctrl <- samples$Conc==0
samples$Time[samples$ctrl] <- 0
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- samples[samples$Time==24 | samples$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$ctrl),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
cnt=cnt_24[1:1000,]
grp_table=grp_table_24
design <- model.matrix(~condition,data = grp_table)
if(!is.null(w))  design <- cbind(design,w)
y <- DGEList(counts=cnt, group=grp_table$condition)
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
grp_table
length(grp_table$condition)==length(unique(grp_table$condition))
edgeR_wrapper <- function(cnt,grp_table,combine_fdr = F,w = NULL,CommonDisp = NULL,TagwiseDisp = NULL){
design <- model.matrix(~condition,data = grp_table)
if(!is.null(w))  design <- cbind(design,w)
y <- DGEList(counts=cnt, group=grp_table$condition)
if(length(grp_table$condition)==length(unique(grp_table$condition))){
y$common.dispersion <- CommonDisp
y$tagwise.dispersion <- TagwiseDisp
}else{
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
}
if(combine_fdr){
y <- calcNormFactors(y)
fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2:(ncol(design)))
lrt_tab <- topTags(lrt,n = Inf)$table[rownames(cnt),]
colnames(lrt_tab) <- gsub('logFC.condition','',colnames(lrt_tab))
return(lrt_tab)
}
p_mat <- fdr_mat <- logFC <- NULL
col_names <- c()
for(i in unique(grp_table$group)){
grp_table_i <- grp_table[grp_table$group==i,]
ctr_row <- rownames(grp_table_i)[grp_table_i$control==T]
for (j in unique(grp_table_i$condition[grp_table_i$control!=T])){
j_row <- rownames(grp_table_i)[grp_table_i$condition==j]
grp_new <- rbind(grp_table[c(ctr_row,j_row),])
cnt_new <- cnt[,rownames(grp_new)]
result_new <- edgeR_wrapper(cnt_new,grp_new,combine_fdr = T)
if(is.null(p_mat)){
p_mat <- result_new$PValue
fdr_mat <- result_new$FDR
logFC <- result_new$logFC
}else{
p_mat <- cbind(p_mat,result_new$PValue)
fdr_mat <- cbind(fdr_mat,result_new$FDR)
logFC <- cbind(logFC,result_new$logFC)
}
col_names <- c(col_names,j)
}
}
colnames(p_mat) <- colnames(fdr_mat) <- colnames(logFC) <- col_names
rownames(p_mat) <- rownames(fdr_mat) <- rownames(logFC) <- rownames(cnt)
return(list('pmat'=p_mat,'fdr_mat'=fdr_mat,'logFC'=logFC))
}
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,combine_fdr = T)
View(raw_result_24)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/combined.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/annotation/20161220RNAseqCDKiPR.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
colnames(counts) <- gsub('.+_S(\\d+)_R.+','\\1',colnames(counts))
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
sample_annotations <- sample_annotations[sample_annotations$Treatment != 'N/A',]
counts <- counts[,colnames(counts)%in%sample_annotations$Sample]
counts <- counts[apply(counts,1,min)>4,]
trt <- strsplit(sample_annotations$Treatment,split = ' ')
samples <- data.frame(cbind('well'=sample_annotations$Sample,'CellLine'=sample_annotations$Cell.line,'DrugName'=unlist(lapply(trt,function(x)x[2])),
'Conc'=unlist(lapply(trt,function(x)x[1])),'Time'=gsub(' hours','',sample_annotations$Time.point)),stringsAsFactors = F)
samples$DrugName[is.na(samples$DrugName)] <- '-'
samples$Conc[samples$Conc=='ctrl'] <- '0.0'
samples$Conc <- as.numeric(samples$Conc)
samples$ctrl <- samples$Conc==0
samples$Time[samples$ctrl] <- 0
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- samples[samples$Time==24 | samples$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$ctrl),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,combine_fdr = T)
#same for 6h
samples_6 <- samples[samples$Time==6 | samples$Time==0,]
samples_6$Time[samples_6$Time==0] <-6
grp_table_6 <- data.frame(cbind('group' = paste(samples_6$CellLine,samples_6$Time,sep = '_'),
'condition' = paste(samples_6$CellLine,samples_6$DrugName,samples_6$Conc,samples_6$Time,sep = '_'),
'control' = samples_6$ctrl),stringsAsFactors = F)
rownames(grp_table_6) <- samples_6$well
cnt_6 <- counts[,samples_6$well]
raw_result_6 <- edgeR_wrapper(cnt_6,grp_table_6,combine_fdr = T)
cnt_sybl <- ens2symbol(unique(c(rownames(raw_result_6)),rownames(raw_result_24)))
cnt_sybl <- cnt_sybl[cnt_sybl$ensembl_gene_id!=''&cnt_sybl$hgnc_symbol!='',]
genes <- cnt_sybl$hgnc_symbol
names(genes) <- cnt_sybl$ensembl_gene_id
raw_result_6 <- raw_result_6[rownames(raw_result_6)%in%names(genes),]
raw_result_24 <- raw_result_24[rownames(raw_result_24)%in%names(genes),]
rownames(raw_result_6) <- genes[rownames(raw_result_6)]
rownames(raw_result_24) <- genes[rownames(raw_result_24)]
raw_result_24 <- raw_result_24[rownames(raw_result_6),]
result_pval <- cbind(raw_result_6[,10],raw_result_24[,10])
result_fdr <- cbind(raw_result_6[,11],raw_result_24[,11])
rownames(result_pval) <- rownames(result_fdr) <- rownames(raw_result_6)
colnames(result_pval) <- colnames(result_fdr) <- c('MCF7_6','MCF7_24')
logfc <- cbind(raw_result_6[,1:7],raw_result_24[,1:7])
View(logfc)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/combined.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/annotation/20161220RNAseqCDKiPR.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
colnames(counts) <- gsub('.+_S(\\d+)_R.+','\\1',colnames(counts))
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
sample_annotations <- sample_annotations[sample_annotations$Treatment != 'N/A',]
counts <- counts[,colnames(counts)%in%sample_annotations$Sample]
counts <- counts[apply(counts,1,min)>4,]
trt <- strsplit(sample_annotations$Treatment,split = ' ')
samples <- data.frame(cbind('well'=sample_annotations$Sample,'CellLine'=sample_annotations$Cell.line,'DrugName'=unlist(lapply(trt,function(x)x[2])),
'Conc'=unlist(lapply(trt,function(x)x[1])),'Time'=gsub(' hours','',sample_annotations$Time.point)),stringsAsFactors = F)
samples$DrugName[is.na(samples$DrugName)] <- '-'
samples$Conc[samples$Conc=='ctrl'] <- '0.0'
samples$Conc <- as.numeric(samples$Conc)
samples$ctrl <- samples$Conc==0
samples$Time[samples$ctrl] <- 0
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- samples[samples$Time==24 | samples$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$ctrl),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,combine_fdr = T)
#same for 6h
samples_6 <- samples[samples$Time==6 | samples$Time==0,]
samples_6$Time[samples_6$Time==0] <-6
grp_table_6 <- data.frame(cbind('group' = paste(samples_6$CellLine,samples_6$Time,sep = '_'),
'condition' = paste(samples_6$CellLine,samples_6$DrugName,samples_6$Conc,samples_6$Time,sep = '_'),
'control' = samples_6$ctrl),stringsAsFactors = F)
rownames(grp_table_6) <- samples_6$well
cnt_6 <- counts[,samples_6$well]
raw_result_6 <- edgeR_wrapper(cnt_6,grp_table_6,combine_fdr = T)
cnt_sybl <- ens2symbol(unique(c(rownames(raw_result_6)),rownames(raw_result_24)))
cnt_sybl <- cnt_sybl[cnt_sybl$ensembl_gene_id!=''&cnt_sybl$hgnc_symbol!='',]
genes <- cnt_sybl$hgnc_symbol
names(genes) <- cnt_sybl$ensembl_gene_id
raw_result_6 <- raw_result_6[rownames(raw_result_6)%in%names(genes),]
raw_result_24 <- raw_result_24[rownames(raw_result_24)%in%names(genes),]
rownames(raw_result_6) <- genes[rownames(raw_result_6)]
rownames(raw_result_24) <- genes[rownames(raw_result_24)]
raw_result_24 <- raw_result_24[rownames(raw_result_6),]
result_pval <- cbind(raw_result_6[,10],raw_result_24[,10])
result_fdr <- cbind(raw_result_6[,11],raw_result_24[,11])
rownames(result_pval) <- rownames(result_fdr) <- rownames(raw_result_6)
colnames(result_pval) <- colnames(result_fdr) <- c('MCF7_6','MCF7_24')
logfc <- cbind(raw_result_6[,1:7],raw_result_24[,1:7])
grp_table$condition
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/processed_data/CDK46_response_201608.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/annotation/sample_annotations_pert1.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
# remove sample with bad quality()
counts <- counts[,-8]
counts <- counts[apply(counts,1,min)>4,]
sample_annotations <- sample_annotations[-33,]
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- sample_annotations[sample_annotations$Time==24 | sample_annotations$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$DrugName=='-'),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
## de_rnaseq.R - functions for the differential expression analysis
##
## LSP RNAseq bcbio pipeline
## https://github.com/chrischen1/bcbio
library(RUVSeq)
library(edgeR)
library(biomaRt)
#' transform TPM to RPKM
#'
#' @param combined output file end with .combined from bcbio.
#' @param tx2gene output file which maps ensumble ID to gene from bcbio.
#' @param spikes a vector of string defining the name of spikes.
#' @return p by n matrix for p genes across n samples
tpm2rpkm <- function(combined,tx2gene,spikes = NULL){
gene_mapping <- cbind('transcript'= c(tx2gene$V1,spikes$GenBank),'gene' = c(tx2gene$V2,spikes$ERCC_ID))
genes <- gene_mapping[,2]
names(genes) <- gene_mapping[,1]
lib_size <- data.frame('numreads'=combined$numreads,'sample'=combined$sample)
x <- lib_size %>% group_by(sample) %>% summarise_each(funs(sum))
scale_factor <- x$numreads/1000000
names(scale_factor) <- x$sample
combined$RPM <- combined$numreads/scale_factor[combined$sample]
combined$RPKM <- combined$RPM/(combined$effectiveLength/1000)
combined$gene <- genes[combined$id]
rpkm_combined <- data.frame('sample'=combined$sample,'gene'=combined$gene,'RPKM'=combined$RPKM)
rpkm_combined_gene <- rpkm_combined %>% group_by(sample,gene)%>% summarise_each(funs(sum))
rpkm_raw <- acast(rpkm_combined_gene,gene~sample)
}
#' get hgnc_symbol from ensembl_gene_id from
#'
#' @param ens vector of ensembl_gene_ids.
#' @return a dataframe with 2 columns: ensembl_gene_id and hgnc_symbol
ens2symbol <- function(ens){
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
target_gene <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'),filters = 'ensembl_gene_id', values = ens, mart = ensembl)
return(target_gene)
}
#' generate .csv file used by bcbio
#'
#' @param sample_path path of .fastq files
#' @return a csv file contain basic sample meta info required for bcbio
get_sample_csv <- function(sample_path){
x=grep('\\.fastq',list.files(sample_path),value = T)
y=gsub('\\.fastq','',x)
z=cbind('samplename'=y,'description'=y)
write.csv(z,paste(sample_path,'samples.csv',sep = ''),row.names = F,quote = F)
}
#' wrapper for getting fold change, pvalue and FDR, by per cell line per time point
#'
#' @param cnt p by n matrix for p genes across n samples
#' @param grp_table dataframe with 3 columns: group, condition and control
#'  group: contains information which treatment samples will be compared against control cases in each group
#'  condition: indicates type of treatment, replicates have same condition
#'  control: TRUE for controls and FALSE for treatments
#'  order of well in samples annotation must be the same as the columns in count table
#'  @param combine_fdr T for combine FDR and p-values with group and F for compute pairwisely
#'  @param w n by p matrix for n samples and p factors for batch effect correction from RUVSeq
#'  @param CommonDisp and TagwiseDisp used internally for passing overal dispersion to comparisons without replicates
#'  @return list of 3 if combine_fdr = F: pmat,fdr_mat and logFC: all are p by m matrix for p genes across m types of treatments
#'          p by m+4 matrix for p genes across m types of treatments and p-value, LR,logCPM and FDR
edgeR_wrapper <- function(cnt,grp_table,combine_fdr = F,w = NULL,CommonDisp = NULL,TagwiseDisp = NULL){
design <- model.matrix(~condition,data = grp_table)
if(!is.null(w))  design <- cbind(design,w)
y <- DGEList(counts=cnt, group=grp_table$condition)
# When both control and treatment lacking replicates, use overall dispersion instead
if(length(grp_table$condition)==length(unique(grp_table$condition))){
print(grp_table$condition)
y$common.dispersion <- CommonDisp
y$tagwise.dispersion <- TagwiseDisp
}else{
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
}
if(combine_fdr){
y <- calcNormFactors(y)
fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=2:(ncol(design)))
lrt_tab <- topTags(lrt,n = Inf)$table[rownames(cnt),]
colnames(lrt_tab) <- gsub('logFC.condition','',colnames(lrt_tab))
return(lrt_tab)
}
p_mat <- fdr_mat <- logFC <- NULL
col_names <- c()
for(i in unique(grp_table$group)){
grp_table_i <- grp_table[grp_table$group==i,]
ctr_row <- rownames(grp_table_i)[grp_table_i$control==T]
for (j in unique(grp_table_i$condition[grp_table_i$control!=T])){
j_row <- rownames(grp_table_i)[grp_table_i$condition==j]
grp_new <- rbind(grp_table[c(ctr_row,j_row),])
cnt_new <- cnt[,rownames(grp_new)]
result_new <- edgeR_wrapper(cnt_new,grp_new,combine_fdr = T,CommonDisp = CommonDisp,TagwiseDisp = TagwiseDisp)
if(is.null(p_mat)){
p_mat <- result_new$PValue
fdr_mat <- result_new$FDR
logFC <- result_new$logFC
}else{
p_mat <- cbind(p_mat,result_new$PValue)
fdr_mat <- cbind(fdr_mat,result_new$FDR)
logFC <- cbind(logFC,result_new$logFC)
}
col_names <- c(col_names,j)
}
}
colnames(p_mat) <- colnames(fdr_mat) <- colnames(logFC) <- col_names
rownames(p_mat) <- rownames(fdr_mat) <- rownames(logFC) <- rownames(cnt)
return(list('pmat'=p_mat,'fdr_mat'=fdr_mat,'logFC'=logFC))
}
y <- DGEList(counts=cnt, group=grp_table$condition)
design <- model.matrix(~condition,data = grp_table)
y <- DGEList(counts=cnt_24, group=grp_table_24$condition)
design <- model.matrix(~condition,data = grp_table_24)
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,CommonDisp = estimateGLMCommonDisp(y, design),TagwiseDisp = estimateGLMTagwiseDisp(y, design))
cnt_24=cnt_24[1:200,]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
design <- model.matrix(~condition,data = grp_table_24)
y <- DGEList(counts=cnt_24, group=grp_table_24$condition)
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,CommonDisp = y$common.dispersion,TagwiseDisp = y$tagwise.dispersion)
grp_table_24
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,CommonDisp = y$common.dispersion,TagwiseDisp = y$tagwise.dispersion)
i="HCC1806_24"
i="HS578T_24"
View(sample_annotations)
grp_table_24
samples_24 <- sample_annotations[sample_annotations$Time==24 | sample_annotations$Conc==0,]
View(samples_24)
samples_24$Time <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$DrugName=='-'),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
View(grp_table_24)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
cnt
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/processed_data/CDK46_response_201608.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/annotation/sample_annotations_pert1.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
# remove sample with bad quality()
counts <- counts[,-8]
counts <- counts[apply(counts,1,min)>4,]
sample_annotations <- sample_annotations[-33,]
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- sample_annotations[sample_annotations$Time==24 | sample_annotations$Conc==0,]
samples_24$Time <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$DrugName=='-'),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
dim(cnt_24)
dim(grp_table_24)
cnt_24=cnt_24[1:200,]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24)
aaa=raw_result_24$logFC
View(aaa)
source('~/Dropbox/_ChrisProject/workspace/bcbio/de_rnaseq.R')
count_file = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/combined.counts"
mata_file  = "~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/annotation/20161220RNAseqCDKiPR.tsv"
out_folder = '~/Dropbox/_ChrisProject/workspace/RNAseq/20170115/processed_data/'
# data cleaning
counts <- read.delim(count_file,as.is = T,row.names = 1)
colnames(counts) <- gsub('.+_S(\\d+)_R.+','\\1',colnames(counts))
# read meta data and change it to starndard format
sample_annotations <- read.delim(mata_file, stringsAsFactors=FALSE)
sample_annotations <- sample_annotations[sample_annotations$Treatment != 'N/A',]
counts <- counts[,colnames(counts)%in%sample_annotations$Sample]
counts <- counts[apply(counts,1,min)>4,]
trt <- strsplit(sample_annotations$Treatment,split = ' ')
samples <- data.frame(cbind('well'=sample_annotations$Sample,'CellLine'=sample_annotations$Cell.line,'DrugName'=unlist(lapply(trt,function(x)x[2])),
'Conc'=unlist(lapply(trt,function(x)x[1])),'Time'=gsub(' hours','',sample_annotations$Time.point)),stringsAsFactors = F)
samples$DrugName[is.na(samples$DrugName)] <- '-'
samples$Conc[samples$Conc=='ctrl'] <- '0.0'
samples$Conc <- as.numeric(samples$Conc)
samples$ctrl <- samples$Conc==0
samples$Time[samples$ctrl] <- 0
# we want to use control in any time for both 6h and 24h group, so we calculate them separately in different group table
#24h
samples_24 <- samples[samples$Time==24 | samples$Time==0,]
samples_24$Time[samples_24$Time==0] <-24
grp_table_24 <- data.frame(cbind('group' = paste(samples_24$CellLine,samples_24$Time,sep = '_'),
'condition' = paste(samples_24$CellLine,samples_24$DrugName,samples_24$Conc,samples_24$Time,sep = '_'),
'control' = samples_24$ctrl),stringsAsFactors = F)
rownames(grp_table_24) <- samples_24$well
cnt_24 <- counts[,samples_24$well]
raw_result_24 <- edgeR_wrapper(cnt_24,grp_table_24,combine_fdr = T)
#same for 6h
samples_6 <- samples[samples$Time==6 | samples$Time==0,]
samples_6$Time[samples_6$Time==0] <-6
grp_table_6 <- data.frame(cbind('group' = paste(samples_6$CellLine,samples_6$Time,sep = '_'),
'condition' = paste(samples_6$CellLine,samples_6$DrugName,samples_6$Conc,samples_6$Time,sep = '_'),
'control' = samples_6$ctrl),stringsAsFactors = F)
rownames(grp_table_6) <- samples_6$well
cnt_6 <- counts[,samples_6$well]
raw_result_6 <- edgeR_wrapper(cnt_6,grp_table_6,combine_fdr = T)
cnt_sybl <- ens2symbol(unique(c(rownames(raw_result_6)),rownames(raw_result_24)))
cnt_sybl <- cnt_sybl[cnt_sybl$ensembl_gene_id!=''&cnt_sybl$hgnc_symbol!='',]
genes <- cnt_sybl$hgnc_symbol
names(genes) <- cnt_sybl$ensembl_gene_id
raw_result_6 <- raw_result_6[rownames(raw_result_6)%in%names(genes),]
raw_result_24 <- raw_result_24[rownames(raw_result_24)%in%names(genes),]
rownames(raw_result_6) <- genes[rownames(raw_result_6)]
rownames(raw_result_24) <- genes[rownames(raw_result_24)]
raw_result_24 <- raw_result_24[rownames(raw_result_6),]
result_pval <- cbind(raw_result_6[,10],raw_result_24[,10])
result_fdr <- cbind(raw_result_6[,11],raw_result_24[,11])
rownames(result_pval) <- rownames(result_fdr) <- rownames(raw_result_6)
colnames(result_pval) <- colnames(result_fdr) <- c('MCF7_6','MCF7_24')
logfc <- cbind(raw_result_6[,1:7],raw_result_24[,1:7])
View(logfc)
source('~/Dropbox/_ChrisProject/workspace/RNAseq/CDK46_response_201608/src/de_pert1.R', echo=TRUE)
samples_6 <- sample_annotations[sample_annotations$Time==6 | sample_annotations$Conc==0,]
samples_6$Time <-6
grp_table_6 <- data.frame(cbind('group' = paste(samples_6$CellLine,samples_6$Time,sep = '_'),
'condition' = paste(samples_6$CellLine,samples_6$DrugName,samples_6$Conc,samples_6$Time,sep = '_'),
'control' = samples_6$DrugName=='-'),stringsAsFactors = F)
rownames(grp_table_6) <- samples_6$well
cnt_6 <- counts[,samples_6$well]
dim(cnt_6)
dim(grp_table_6)
raw_result_6 <- edgeR_wrapper(cnt_6,grp_table_6)
logFC_raw <- cbind(raw_result_6$logFC,raw_result_24$logFC[rownames(raw_result_6$logFC),])
pval_raw <- cbind(raw_result_6$pmat,raw_result_24$pmat[rownames(raw_result_6$logFC),])
fdr_raw <- cbind(raw_result_6$fdr_mat,raw_result_24$fdr_mat[rownames(raw_result_6$logFC),])
cnt_sybl <- ens2symbol(rownames(logFC_raw))
cnt_sybl <- cnt_sybl[cnt_sybl$ensembl_gene_id!=''&cnt_sybl$hgnc_symbol!='',]
genes <- cnt_sybl$hgnc_symbol
names(genes) <- cnt_sybl$ensembl_gene_id
logFC <- logFC_raw[rownames(logFC_raw)%in%names(genes),]
rownames(logFC) <- genes[rownames(logFC)]
pval <- pval_raw[rownames(pval_raw)%in%names(genes),]
rownames(pval) <- genes[rownames(pval)]
fdr <- fdr_raw[rownames(fdr_raw)%in%names(genes),]
rownames(fdr) <- genes[rownames(fdr)]
write.csv(logFC,paste(out_folder,'logFC.csv',sep = ''))
write.csv(pval,paste(out_folder,'pval.csv',sep = ''))
write.csv(fdr,paste(out_folder,'fdr.csv',sep = ''))
source('~/Dropbox/_ChrisProject/workspace/bcbio/variant_calling.R')
combine_vcf
vcf2vep()
vcf2vep
vep_parser
